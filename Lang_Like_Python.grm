"Name"    = 'PyLike'
"Author"  = 'Eslam Abbas'
"Version" = '1.0'
"About"   = 'Language like python'

"Case Sensitive" = True
"Start Symbol"   = <Program>

!----------------------------------------------
! Character Sets
!----------------------------------------------
{ID Head}      = {Letter} + [_]
{ID Tail}      = {AlphaNumeric} + [_]
{String Chars} = {Printable} - ["]
{Hex Digit}    = {Digit} + [abcdefABCDEF]
{WS}           = {Whitespace}

!----------------------------------------------
! Terminals
!----------------------------------------------
NewLine        = {CR}{LF} | {CR} | {LF}
Whitespace     = {WS}+

! Comments
CommentLine   = '#' {Printable}* NewLine?

! Literals
IntLiteral    = {Digit}+
HexLiteral    = '0x' {Hex Digit}+
FloatLiteral  = {Digit}+ '.' {Digit}+ | '.' {Digit}+
StringLiteral = '"' {String Chars}* '"'
BoolLiteral   = 'True' | 'False'
NoneLiteral   = 'None'

! Identifiers
Identifier     = {ID Head}{ID Tail}*

!----------------------------------------------
! Rules
!----------------------------------------------

! Program Structure
<Program> ::= <Statements>

<Statements> ::= <Statement> <Statements>
               | <Statement>

<Statement> ::= <SimpleStatement>
              | <CompoundStatement>

<SimpleStatement> ::= <Assignment>
                    | <ExpressionStmt>
                    | <ReturnStmt>
                    | <ImportStmt>
                    | <BreakStmt>
                    | <ContinueStmt>
                    | <PassStmt>

<CompoundStatement> ::= <IfStmt>
                      | <WhileStmt>
                      | <ForStmt>
                      | <FunctionDef>
                      | <ClassDef>

! Basic Statements
<Assignment> ::= <VariableList> '=' <ExpressionList>
               | <PrimaryExpr> '+=' <Expression>
               | <PrimaryExpr> '-=' <Expression>
               | <PrimaryExpr> '*=' <Expression>
               | <PrimaryExpr> '/=' <Expression>
               | <PrimaryExpr> '%=' <Expression>

<VariableList> ::= <PrimaryExpr> ',' <VariableList>
                 | <PrimaryExpr>

! IMPORTANT: Removed <Variable> definition and use <PrimaryExpr> instead

<ExpressionStmt> ::= <Expression>

<ReturnStmt> ::= 'return' <ExpressionList>
               | 'return'

<ImportStmt> ::= 'import' <ModuleList>
               | 'from' <ModuleName> 'import' <IdentifierList>

<ModuleList> ::= <ModuleName> ',' <ModuleList>
               | <ModuleName>

<ModuleName> ::= Identifier
               | <ModuleName> '.' Identifier

<IdentifierList> ::= Identifier ',' <IdentifierList>
                   | Identifier

<BreakStmt> ::= 'break'

<ContinueStmt> ::= 'continue'

<PassStmt> ::= 'pass'

! Control Flow Statements
<IfStmt> ::= 'if' <Expression> ':' <Block> <ElseIfList> <ElseStmt>
           | 'if' <Expression> ':' <Block> <ElseIfList>
           | 'if' <Expression> ':' <Block> <ElseStmt>
           | 'if' <Expression> ':' <Block>

<ElseIfList> ::= 'elif' <Expression> ':' <Block> <ElseIfList>
               | 'elif' <Expression> ':' <Block>

<ElseStmt> ::= 'else' ':' <Block>

<WhileStmt> ::= 'while' <Expression> ':' <Block>

<ForStmt> ::= 'for' <VariableList> 'in' <Expression> ':' <Block>

<Block> ::= <IndentedStatements>

<IndentedStatements> ::= <IndentedStatement> <IndentedStatements>
                       | <IndentedStatement>

<IndentedStatement> ::= <Statement>

! Function Definition
<FunctionDef> ::= 'def' Identifier '(' <ParameterList> ')' ':' <Block>
                | 'def' Identifier '(' ')' ':' <Block>

<ParameterList> ::= <Parameter> ',' <ParameterList>
                  | <Parameter>

<Parameter> ::= Identifier
              | Identifier '=' <Expression>

! Class Definition
<ClassDef> ::= 'class' Identifier '(' <InheritanceList> ')' ':' <Block>
             | 'class' Identifier ':' <Block>

<InheritanceList> ::= <ClassName> ',' <InheritanceList>
                    | <ClassName>

<ClassName> ::= Identifier
              | <ModuleName> '.' Identifier

! Expressions
<ExpressionList> ::= <Expression> ',' <ExpressionList>
                   | <Expression>

<Expression> ::= <OrExpr>

<OrExpr> ::= <AndExpr> 'or' <OrExpr>
           | <AndExpr>

<AndExpr> ::= <NotExpr> 'and' <AndExpr>
            | <NotExpr>

<NotExpr> ::= 'not' <NotExpr>
            | <ComparisonExpr>

<ComparisonExpr> ::= <AdditionExpr> '==' <AdditionExpr>
                   | <AdditionExpr> '!=' <AdditionExpr>
                   | <AdditionExpr> '<' <AdditionExpr>
                   | <AdditionExpr> '<=' <AdditionExpr>
                   | <AdditionExpr> '>' <AdditionExpr>
                   | <AdditionExpr> '>=' <AdditionExpr>
                   | <AdditionExpr> 'in' <AdditionExpr>
                   | <AdditionExpr> 'not' 'in' <AdditionExpr>
                   | <AdditionExpr> 'is' <AdditionExpr>
                   | <AdditionExpr> 'is' 'not' <AdditionExpr>
                   | <AdditionExpr>

<AdditionExpr> ::= <AdditionExpr> '+' <MultiplicationExpr>
                 | <AdditionExpr> '-' <MultiplicationExpr>
                 | <MultiplicationExpr>

<MultiplicationExpr> ::= <MultiplicationExpr> '*' <PowerExpr>
                       | <MultiplicationExpr> '/' <PowerExpr>
                       | <MultiplicationExpr> '//' <PowerExpr>
                       | <MultiplicationExpr> '%' <PowerExpr>
                       | <PowerExpr>

<PowerExpr> ::= <UnaryExpr> '**' <PowerExpr>
              | <UnaryExpr>

<UnaryExpr> ::= '+' <UnaryExpr>
              | '-' <UnaryExpr>
              | <PrimaryExpr>

<PrimaryExpr> ::= <Atom>
                | <PrimaryExpr> '.' Identifier
                | <PrimaryExpr> '[' <Expression> ']'
                | <PrimaryExpr> '(' <ArgumentList> ')'
                | <PrimaryExpr> '(' ')'

<Atom> ::= Identifier
         | IntLiteral
         | FloatLiteral
         | StringLiteral
         | BoolLiteral
         | NoneLiteral
         | '(' <Expression> ')'
         | <ListLiteral>
         | <DictLiteral>

<ArgumentList> ::= <Argument> ',' <ArgumentList>
                 | <Argument>

<Argument> ::= <Expression>
             | Identifier '=' <Expression>

<ListLiteral> ::= '[' <ExpressionList> ']'
                | '[' ']'

<DictLiteral> ::= '{' <KeyValueList> '}'
                | '{' '}'

<KeyValueList> ::= <KeyValue> ',' <KeyValueList>
                 | <KeyValue>

<KeyValue> ::= <Expression> ':' <Expression>
